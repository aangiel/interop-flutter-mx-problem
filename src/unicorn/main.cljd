(ns unicorn.main
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:syncfusion_flutter_charts/charts.dart" :as ch]
    [tilton.fmx.api :as fx]
    [tilton.fmx.factory :as fxf]
    [tilton.mx.api :as mx]))

(fxf/deftags tilton.fmx.factory/childless-stateful
             (dropdown-button-form-field m/DropdownButtonFormField)
             (sf-cartesian-chart ch/SfCartesianChart)
             (text-form-field m/TextFormField))

(defn make-spline-series [data]
  (ch/SplineSeries
    .dataSource data
    .xValueMapper (fn [v _] (:x v))
    .yValueMapper (fn [v _] (:y v))
    .splineType (ch/SplineType.natural)))

(defn make-app []
  (fx/material-app
    {:title "F/MX Hello World"
     :theme (m/ThemeData
              .primarySwatch m/Colors.orange
              .brightness m/Brightness.dark
              .useMaterial3 false)}
    (fx/scaffold
      {:appBar (m/AppBar :title (m/Text "Welcome to Flutter/MX"))}
      (fx/row
        (fx/expanded
          {:flex 2}
          (fx/column (dropdown-button-form-field
            {:value      (mx/cI {:x 0.5, :y 190.5})
             :onChanged  (mx/cF #(mx/mset! me :value %))
             :items      [(m/DropdownMenuItem
                            .value {:x 0.5, :y 190.5}
                            .child (m/Text (str {:x 0.5, :y 190.5})))
                          (m/DropdownMenuItem
                            .value {:x 11, :y 75.6}
                            .child (m/Text (str {:x 11, :y 75.6})))]}
            {:name :pipe-nominal-size})

          (text-form-field
            {:enabled    false
             :controller (mx/cF (m/TextEditingController
                                  .text (str (mx/mget me :value))))}
            {:name  :cross-section-area
             :value (mx/cF (mx/mget (mx/fm* :pipe-nominal-size)
                                    :value))})))

        (fx/expanded
          {:flex 8}
          (sf-cartesian-chart
            {:title  (ch/ChartTitle .text "Cartesian Chart")
             :legend (ch/Legend .isVisible true)
             :series (mx/cF (fx/as-is
                              (let [^#/(List ch/SplineSeries) s [(make-spline-series
                                                                   [{:x 0.0, :y 10}
                                                                    ;; safety
                                                                    ;; {:x 0.5, :y 19}
                                                                    (map #(* 2 (mx/mget (mx/fm* :pipe-nominal-size)
                                                                                        :value)))
                                                                    {:x 1.0, :y 20}])]]
                                s)))}
            {:sample-value 30
             #_#_:safety-too   {:x 0.5, :y 190.5}}))))))


(defn main []
  (.ensureInitialized w/WidgetsFlutterBinding)
  (fx/run-app
    (fx/fx-render nil
                  (make-app))))