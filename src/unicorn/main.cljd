(ns unicorn.main
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:syncfusion_flutter_charts/charts.dart" :as ch]
    ["dart:math" :as math]
    [tilton.fmx.api :as fx]
    [tilton.fmx.factory :as fxf]
    [tilton.mx.api :as mx]))

(fxf/deftags tilton.fmx.factory/childless-stateful
             (dropdown-button-form-field m/DropdownButtonFormField)
             (sf-cartesian-chart ch/SfCartesianChart)
             (text-form-field m/TextFormField))

(defn make-spline-series [data]
  (ch/SplineSeries
    .dataSource data
    .xValueMapper (fn [v _] (:x v))
    .yValueMapper (fn [v _] (:y v))
    .splineType (ch/SplineType.natural)))

(defn make-app []
  (fx/material-app
    {:title "F/MX Hello World"
     :theme (m/ThemeData
              .primarySwatch m/Colors.orange
              .brightness m/Brightness.dark
              .useMaterial3 false)}
    (fx/scaffold
      {:appBar (m/AppBar :title (m/Text "Welcome to Flutter/MX"))}
      (fx/row
        (fx/expanded
          {:flex 2}
          (fx/column (dropdown-button-form-field
                       {:value     (mx/cI 1)
                        :onChanged (mx/cF #(mx/mset! me :value %))
                        :items     [(m/DropdownMenuItem
                                      .value 1
                                      .child (m/Text "1"))
                                    (m/DropdownMenuItem
                                      .value 2
                                      .child (m/Text "2"))]}
                       {:name :pipe-nominal-size})

                     (text-form-field
                       {:enabled    false
                        :controller (mx/cF (m/TextEditingController
                                             .text (str (mx/mget me :value))))}
                       {:name  :cross-section-area
                        :value (mx/cF (mx/mget (mx/fm* :pipe-nominal-size)
                                               :value))})))

        (fx/expanded
          {:flex 8}
          (sf-cartesian-chart
            {:title  (ch/ChartTitle .text "Cartesian Chart")
             :legend (ch/Legend .isVisible true)
             :series (mx/cF (fx/as-is
                              (let [y-cell (mx/mget (mx/fm* :pipe-nominal-size) :value)

                                    ^#/(List ch/SplineSeries) series
                                    [(make-spline-series
                                       (->> (range 0 (+ 120 1))
                                            (map #(hash-map :x %
                                                            :y (math/sin (/ % y-cell))))))]]
                                series)))}))))))


(defn main []
  (.ensureInitialized w/WidgetsFlutterBinding)
  (fx/run-app
    (fx/fx-render nil
                  (make-app))))